#!/usr/bin/env python3
"""
PhysicsGPT - Simple Streamlit Interface
Fallback version that works even if CrewAI has issues.
"""

# Fix SQLite version issue for Streamlit Cloud
try:
    __import__('pysqlite3')
    import sys
    sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')
except ImportError:
    pass

import streamlit as st
import os
from datetime import datetime

# Page configuration
st.set_page_config(
    page_title="PhysicsGPT - AI Physics Research",
    page_icon="‚öõÔ∏è",
    layout="wide",
)

def main():
    # Header
    st.markdown("""
    # ‚öõÔ∏è PhysicsGPT
    ### Advanced 10-Agent Physics Research System
    
    **Status:** Testing deployment on Streamlit Cloud
    """)
    
    # Test system status
    st.subheader("üîß System Status")
    
    # Test imports
    status_container = st.container()
    
    with status_container:
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Core Dependencies:**")
            
            # Test basic imports
            try:
                import openai
                st.success("‚úÖ OpenAI")
            except ImportError:
                st.error("‚ùå OpenAI")
            
            try:
                import streamlit
                st.success("‚úÖ Streamlit")
            except ImportError:
                st.error("‚ùå Streamlit")
                
            try:
                import pandas
                st.success("‚úÖ Pandas")
            except ImportError:
                st.error("‚ùå Pandas")
        
        with col2:
            st.write("**AI Framework:**")
            
            try:
                import crewai
                st.success("‚úÖ CrewAI")
                crew_status = True
            except ImportError as e:
                st.error(f"‚ùå CrewAI: {e}")
                crew_status = False
            
            try:
                import langchain
                st.success("‚úÖ LangChain")
            except ImportError:
                st.error("‚ùå LangChain")
            
            try:
                from physics_crew_system import PhysicsGPTCrew
                st.success("‚úÖ PhysicsGPT System")
                system_ready = True
            except ImportError as e:
                st.error(f"‚ùå PhysicsGPT System: {e}")
                system_ready = False
    
    # Environment check
    st.subheader("üîë Environment Configuration")
    
    env_status = st.container()
    with env_status:
        if "OPENAI_API_KEY" in st.secrets:
            st.success("‚úÖ OpenAI API Key configured")
        else:
            st.warning("‚ö†Ô∏è OpenAI API Key not found in secrets")
            st.info("Add your OPENAI_API_KEY in Streamlit Cloud secrets")
    
    # System ready check
    if crew_status and system_ready:
        st.success("üéâ **System Ready!** All components loaded successfully.")
        
        # Simple query interface
        st.subheader("üî¨ Physics Query Interface")
        
        query = st.text_area(
            "Enter your physics question:",
            placeholder="e.g., What is quantum entanglement?",
            height=100
        )
        
        if st.button("üöÄ Analyze with PhysicsGPT", type="primary"):
            if query:
                with st.spinner("ü§ñ Analyzing with 5 core physics agents..."):
                    try:
                        from physics_crew_system import PhysicsGPTCrew
                        physics_crew = PhysicsGPTCrew()
                        result = physics_crew.analyze_physics_query(query)
                        
                        if result['success']:
                            st.success("‚úÖ Analysis Complete!")
                            st.markdown("### üìÑ Results:")
                            st.markdown(result['result'])
                        else:
                            st.error(f"‚ùå Analysis failed: {result.get('error', 'Unknown error')}")
                    except Exception as e:
                        st.error(f"‚ùå System error: {str(e)}")
            else:
                st.warning("Please enter a physics question")
    else:
        st.error("‚ùå **System Not Ready** - Please check the errors above")
        st.info("The system is still deploying. Try refreshing in a few minutes.")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666;">
        <p>‚öõÔ∏è PhysicsGPT - Advanced AI Physics Research System</p>
        <p>Powered by CrewAI ‚Ä¢ 10 Specialized Physics Agents</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()